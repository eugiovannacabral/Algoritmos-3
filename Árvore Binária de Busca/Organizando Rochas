#include <iostream>
#include<string>
using namespace std;

struct dados
{
    string nome;    //nome da rocha
    string tipo;  // tipo da rocha
};

struct node
{
	dados info; 
	node * left;  
	node * right;

};

void insert(node * &curr, dados info)
{
	if(curr == NULL)
	{
		curr = new node;
		curr->info = info;
		curr->left = NULL;
		curr->right = NULL;
	}else
	{
		if(info.nome < curr->info.nome)
		{
			insert(curr->left, info);
		}else
		{
			insert(curr->right, info);
		}
	}
	
}

node * search(node * curr, dados info)
{
	if(curr == NULL)
	{
		return NULL;
	}else
	{
		if(curr->info.nome == info.nome)
		{
			return curr;
		}else
		{
			if(info.nome < curr->info.nome)
			{
				return search(curr->left, info);
			}else
			{
				return search(curr->right, info);
			}
		}
	}
}

node * repoint_less(node * &curr)
{
	if(curr->left == NULL)
	{
		node * aux = curr;
		curr = curr->right;
		return aux;
	}else
	{
		return repoint_less(curr->left);
	}
}

bool remove(node * &curr, dados info)
{
	if(curr == NULL)
	{
		return false;
	}else
	{
		if(curr->info.nome == info.nome)
		{	
			node * aux = curr;
			//ou ele tem um filho a direita ou a esquerda
			if(curr->left == NULL)
			{
				curr = curr->right;				//ta dizendo que nao tem filho para a esquerda		//fazer a remoção
			}else if(curr->right == NULL)
			{
				curr = curr->left;
			}else //Esse caso é para quando o nó tem dois filhos
			{
				aux = repoint_less(curr->right); // vai pegar o menor da subarvore à direita e vai salva-lo 
				curr->info = aux->info;		// 16 = 16			//ex:16 caso queira remover a raiz, alem disso faz o pai do menor encontrado aponta para o filho
			}
			delete aux;
			aux = NULL;//só para garantir
			return true;
			
		}else
		{
			if(info.nome < curr->info.nome)
			{
				return remove(curr->left, info);
			}else
			{
				return remove(curr->right, info);
			}
		}
	}
}

void destruct(node * & curr)
{
	if(curr != NULL)
	{
		destruct(curr->left);
		destruct(curr->right);
		delete curr;
	}
}

int main()
{
    int op;       // opcao que o usuario informara caso deseje inserir(1), busca(2) ou sair(0)
    string busca; // nome do filme que o usuario deseja procurar
    string nome_procurado;
    string tipo_procurado;
    node * curr;
    dados info;   //informação de um filme
    
    cin >> op;
    
    while(op != 0)
    {
        if(op == 1)
        {
            getline(cin >> ws, info.nome);
            getline(cin >> ws, info.tipo);
            
            insert(curr, info);
        }else if(op == 2)
        {
            getline(cin >> ws, busca);
                
            dados temp;         //criando uma variavel temporaria devido a incompatibilidade do tipo de busca e do segundo parametro de search
            temp.nome = busca;  // recebendo o nome do filme desejado 
            node* resultado = search(curr, temp); // Se o filme existir, resultado será o endereço do nó onde estão as informações do filme.
                
            if(resultado == NULL)
            {
                cout << "Rocha nao encontrada"<< endl;    
            }else
            {
                cout << "Nome: "<< resultado->info.nome << endl;
                cout << "Tipo: "<< resultado->info.tipo << endl;
                
            }
        }else if(op == 3)
        {
            getline(cin >> ws, nome_procurado);
            getline(cin >> ws, tipo_procurado);
            
            dados up;         //criando uma variavel temporaria devido a incompatibilidade do tipo de busca e do segundo parametro de search
            up.nome = nome_procurado;  // recebendo o nome do filme desejado 
            up.tipo = tipo_procurado;
            node* result = search(curr, up); // Se o filme existir, resultado será o endereço do nó onde estão as informações do filme.
            
            if(up.nome == result->info.nome  && up.tipo == result->info.tipo)
            {
                remove(curr, up);
                cout << "Rocha removida com sucesso" << endl;
            }else
            {
                cout << "Rocha nao encontrada para remocao" << endl;
            }
            
        }else
        {
            cout << "Operacao invalida" << endl;
        }
            
        cin >> op;
    }
    
	return 0;
}
